pipeline {
  agent {
    docker {
      image 'mkitbloo/maven-springapp-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  options {
    // Discard old builds to save space
    buildDiscarder(logRotator(numToKeepStr: '10'))  // Keeps only the last 10 builds
    // Timeout for the pipeline to prevent long-running builds
    timeout(time: 1, unit: 'HOURS')  // Ensures the pipeline doesn't run indefinitely
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // git branch: 'main', url: 'https://github.com/mkitbloo/devops-jenkins.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // Build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.106.192.1:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "mkitbloo/springapp:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "devops-jenkins"
        GIT_USER_NAME = "mkitbloo"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "mariechoi430@gmail.com"
            git config user.name "Marie"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
            git add spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
    stage('Cleanup') {  // Added cleanup stage
      steps {
        cleanWs() // Clean the workspace after the build
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: 'spring-boot-app/target/*.jar', allowEmptyArchive: true  // Archive build artifacts
      mail to: 'mariechoi@gmail.com',  // Send email notification
           subject: "Jenkins Build ${currentBuild.fullDisplayName}",
           body: "Build ${currentBuild.fullDisplayName} finished with status: ${currentBuild.currentResult}"
    }
  }
}
